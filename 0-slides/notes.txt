Motivation
==========

Thought experiment. We want to be able to:

 - write clean, maintainable code;
 - bind web addresses to pieces of code in our web application;
 - retrieve data from the URLs in a type-safe fashion;
 - generate new URLs within our application;
 - bolt on request-processing functionality as required;
 - compose routes together to produce other routes. (???)

And we want to do it in an elegant way.

 - simple, clean syntax;
 - type safety.

See it in action
================

Show a demo web app - calculator.

Show the routing table.

Possible running example, "/add/NUMBER/to/NUMBER", demonstrates:
 - typed arguments (part 1)
 - discarding path fragments (part 2)

Build it!
=========

Walk through the essential components of the demo:

 - HLists
   - Data definition of List
   - Type definition of HList
   - Very high-level comparison:
     - Types in List are recursive; types in HList are not
     - Difference in definition of cons
   - Pointers to blog posts and discussion

 - Simple path example
   - Assume we want *everything* from the URL
   - Demonstrate decoding and encoding URLs
     - Introduce Bidi function to parse one path part
   - Introduce Path
     - Definitions of encode() and decode()
   - Introduce PCons and PNil
 
 - Simple site example
   - Iterate over paths
 
 - Realistic path example
   - Decouple path length from argument list length
 
 - Routes (binding paths to code)
   - HList <-> Tuple conversion
   - HList <-> argument list conversion

Extensions
==========

Where can we take this next? Bit of an open discussion:

 - Dispatch to templates
 - Rest arguments ??
 - Type-safe URL parameter parsing ??
 - Other data from the request ??

? Related work
==============

Run through these libraries:

 - Sinatra/Scalatra/Django
 - Unfiltered,Blueeyes
 - Dispatch.plt
 - Lift SiteMap

and comment on:

 - type safety;
 - bi-directionality;
 - composability.
